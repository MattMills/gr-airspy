/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(airspyhf.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(f0eaaa215a3fdc186873b233d1cdb51d)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/airspy/airspyhf.h>
// pydoc.h is automatically generated in the build directory
#include <airspyhf_pydoc.h>

void bind_airspyhf(py::module& m)
{

    using airspyhf = ::gr::airspy::airspyhf;


    py::class_<airspyhf,
               gr::sync_block,
               gr::block,
               gr::basic_block,
               std::shared_ptr<airspyhf>>(m, "airspyhf", D(airspyhf))

        .def(py::init(&airspyhf::make),
             py::arg("serial_number") = "",
             py::arg("samplerate") = 768000,
             py::arg("frequency") = 7000000,
             D(airspyhf, make))


        .def_static("list_devices", &airspyhf::list_devices, D(airspyhf, list_devices))


        .def("set_freq", &airspyhf::set_freq, py::arg("freq_hz"), D(airspyhf, set_freq))


        .def("set_samplerate",
             &airspyhf::set_samplerate,
             py::arg("samplerate"),
             D(airspyhf, set_samplerate))


        .def("get_samplerates", &airspyhf::get_samplerates, D(airspyhf, get_samplerates))


        .def("is_streaming", &airspyhf::is_streaming, D(airspyhf, is_streaming))


        .def(
            "set_hf_agc", &airspyhf::set_hf_agc, py::arg("flag"), D(airspyhf, set_hf_agc))


        .def("set_hf_agc_threshold",
             &airspyhf::set_hf_agc_threshold,
             py::arg("flag"),
             D(airspyhf, set_hf_agc_threshold))


        .def("set_hf_att",
             &airspyhf::set_hf_att,
             py::arg("value"),
             D(airspyhf, set_hf_att))


        .def(
            "set_hf_lna", &airspyhf::set_hf_lna, py::arg("flag"), D(airspyhf, set_hf_lna))


        .def("set_lib_dsp",
             &airspyhf::set_lib_dsp,
             py::arg("flag"),
             D(airspyhf, set_lib_dsp))


        .def("board_partid_serialno_read",
             &airspyhf::board_partid_serialno_read,
             D(airspyhf, board_partid_serialno_read))


        .def("version_string_read",
             &airspyhf::version_string_read,
             D(airspyhf, version_string_read))

        ;
}
